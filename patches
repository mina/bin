#!/bin/sh

set -euo pipefail
# Turn on for debugging
set -x

TEST="${TEST:-0}"

head=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)
parent=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
RANGE="${RANGE:-"$parent..HEAD"}"
git_send_to="netdev@vger.kernel.org"

echoerr() { cat <<< "$@" 1>&2; }

function create_patches() {
	rm -rf $head

	cover_letter=""
	set +e
	git config branch.$head.description > ~/.description.txt && \
		cover_letter="1"
	set -e

	count=$(($(git rev-list --count "$RANGE")))

	if [[ $count < 1 ]]; then
		echo "Not enough commits in range: $count"
		exit 1
	fi

	if [[ $count > 1 ]] && [ ! -z "$cover_letter" ]; then
		cover_letter="--cover-letter --cover-from-description=auto --description-file=~/.description.txt"
	else
		cover_letter=""
	fi

	to=$(git diff "$RANGE" | ./scripts/get_maintainer.pl --nogit-fallback \
		--norolestats -nom -nor --nomoderated --nomultiline)
	cc=$(git diff "$RANGE" | ./scripts/get_maintainer.pl --nogit-fallback \
		--norolestats -nol --nomoderated --nomultiline)

	if [[ $TEST != 0 ]]; then
		to=""
		cc=""
	fi

	files=$(git format-patch \
		-o $head \
		"$RANGE" \
		$cover_letter \
		--to="$to" \
		--cc="$cc" \
		--subject-prefix='PATCH net-next' \
		"$@")

	# Delete change-id
	for file in $files; do
		sed '/Change-Id:/d' $file -i
	done

	echo $files
}

send_patches_no_confirm() {
	files=$(create_patches $@)

	if [[ $TEST != 0 ]]; then
		git_send_to="almasrymina@google.com"
	fi

	yes | git send-email $files --to="$git_send_to" --cc-cover --confirm=never

	git tag "$head-$(basename "$0")-$(date +%F-%s)"
}

send_patches() {
	files=$(create_patches $@)

	git send-email $files --cc-cover --confirm=never

	git tag "$head-$(basename "$0")-$(date +%F-%s)"
}

checkpatch_patches() {
	files=$(create_patches $@)

	# checkpatch
	for file in $files; do
		set +e
		./scripts/checkpatch.pl --patch $file --codespell
		set -e
	done

	# kernel-doc
	files=$(git diff "$RANGE" --name-only)
	echo kernel-doc...
	for file in $files; do
		./scripts/kernel-doc -none $file
	done
	echo done kernel-doc
}

command="$1"
shift

if [ "$command" == "create_patches" ]; then
	create_patches $@
elif [ "$command" == "send_patches" ]; then
	send_patches $@
elif [ "$command" == "send_patches_no_confirm" ]; then
	send_patches_no_confirm $@
elif [ "$command" == "checkpatch_patches" ]; then
	checkpatch_patches $@
fi
