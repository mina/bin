#!/bin/sh

set -ex


function get_maintainers() {
	set -ex

	local range=$1

	maintainersdir=".$range"
	rm -rf "$maintainersdir"
	mkdir -p "$maintainersdir"

	git diff "$range" | ./scripts/get_maintainer.pl --nogit-fallback \
		--norolestats -nom -nor --nomoderated > "$maintainersdir"/TO.txt

	git diff "$range" | ./scripts/get_maintainer.pl --nogit-fallback \
		--norolestats -nol --nomoderated > "$maintainersdir"/CC.txt
	}

function create_patches() {
	set -ex

	local parent=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
	local head=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)

	git config branch.$head.description > description.txt

	set +e
	cover_letter=$(git config branch.$head.description)
	set -e

	count=$(($(git rev-list --count "$RANGE")))

	if [[ $count < 1 ]]; then
		echo "Not enough commits in range: $count"
		exit 1
	fi

	echo count=$count

	if [[ $count > 1 ]] && [ ! -z "$cover_letter" ]; then
		cover_letter="--cover-letter --cover-from-description=auto --description-file=description.txt"
	else
		cover_letter=""
	fi

	if [ -z "$RANGE" ]; then
		RANGE="$parent..HEAD"
	fi
	echo RANGE="$RANGE"

	get_maintainers $RANGE

	to=$(cat "$maintainersdir"/TO.txt | tr \\n ', ')
	cc=$(cat "$maintainersdir"/CC.txt | tr \\n ', ')
	files=$(git format-patch \
		-o $head \
		"$RANGE" \
		$cover_letter \
		--to="$to" \
		--cc="$cc" \
		--subject-prefix='PATCH net-next' \
		"$@")

	}
